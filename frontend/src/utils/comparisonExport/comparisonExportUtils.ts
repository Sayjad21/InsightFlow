import type { ComparisonResult } from "../../types";
import { downloadFile } from "../helpers/downloadFile";
import { formatDate } from "../helpers/dateFormatter";
import { getCompanyNames } from "../helpers/comparisonCompanyNames";
import { generateComparisonTextContent } from "./txtUtil";
import { generateComparisonMarkdownContent } from "./mdUtil";
import { marked } from "marked";
import { generateComparisonPdfContents } from "./pdfUtil";
import { PdfExporter } from "../helpers/pdfFunctions";

// Generate TXT export for comparison
export function exportComparisonToTxt(comparison: ComparisonResult): void {
  const content = generateComparisonTextContent(comparison);
  const companyNames = getCompanyNames(comparison);
  const filename = `${companyNames
    .join("_vs_")
    .replace(/[^a-zA-Z0-9_]/g, "")}_comparison_report.txt`;
  const blob = new Blob([content], { type: "text/plain" });
  downloadFile(blob, filename);
}

// Generate Markdown export for comparison
export function exportComparisonToMarkdown(comparison: ComparisonResult): void {
  const content = generateComparisonMarkdownContent(comparison);
  const companyNames = getCompanyNames(comparison);
  const filename = `${companyNames
    .join("_vs_")
    .replace(/[^a-zA-Z0-9_]/g, "")}_comparison_report.md`;
  const blob = new Blob([content], { type: "text/markdown" });
  downloadFile(blob, filename);
}

// Generate HTML export for comparison
export function exportComparisonToHtml(comparison: ComparisonResult): void {
  const markdownContent = generateComparisonMarkdownContent(comparison);

  const htmlContent = marked(markdownContent); // Proper Markdown parsing

  // Wrap in proper HTML structure
  const companyNames = getCompanyNames(comparison);
  const fullHtml = `
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>${companyNames.join(" vs ")} - Comparison Report</title>
    <style>
      body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
      h1 { color: #333; border-bottom: 2px solid #333; }
      h2 { color: #666; border-bottom: 1px solid #666; }
      h3, h4 { color: #888; }
      li { margin: 5px 0; }
      img { display: block; margin: 20px auto; }
      p { margin: 10px 0; }
      .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
      .metric-card { border: 1px solid #ddd; padding: 15px; border-radius: 8px; }
      .benchmark-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }
      .benchmark-card { border: 1px solid #ddd; padding: 10px; border-radius: 6px; text-align: center; }
    </style>
  </head>
  <body>
    ${htmlContent}
  </body>
</html>
  `;

  const filename = `${companyNames
    .join("_vs_")
    .replace(/[^a-zA-Z0-9_]/g, "")}_comparison_report.html`;
  const blob = new Blob([fullHtml], { type: "text/html" });
  downloadFile(blob, filename);
}

// Generate PDF export with proper formatting and images
export async function exportComparisonToPdf(
  comparison: ComparisonResult
): Promise<void> {
  try {
    const pdf = new PdfExporter();

    // Title Page
    const companyNames = getCompanyNames(comparison);
    pdf.pdf.setFontSize(20);
    pdf.pdf.setFont("times", "bold");
    pdf.pdf.text("Company Comparison Report", 20, pdf.yPosition);
    pdf.yPosition += 15;

    pdf.pdf.setFontSize(16);
    pdf.pdf.text(companyNames.join(" vs "), 20, pdf.yPosition);
    pdf.yPosition += 10;

    pdf.pdf.setFontSize(10);
    pdf.pdf.setFont("times", "normal");
    pdf.pdf.text(
      `Generated on: ${formatDate(comparison.comparisonDate)}`,
      20,
      pdf.yPosition
    );
    pdf.yPosition += 7;
    pdf.pdf.text(
      `Pdf Report generated on ${new Date().toLocaleString("en-US", {
        month: "short", // "Sep"
        day: "2-digit", // "14"
        year: "numeric", // "2025"
        hour: "2-digit", // "09"
        minute: "2-digit", // "43"
        hour12: true, // AM/PM format
      })}`,
      20,
      pdf.yPosition
    );
    pdf.yPosition += 7;
    pdf.pdf.text(
      `Comparison Type: ${comparison.comparisonType || "standard"}`,
      20,
      pdf.yPosition + 7
    );
    pdf.yPosition += 20;

    await generateComparisonPdfContents(pdf, comparison);
    // Footer
    pdf.checkPageBreak(30);
    pdf.pdf.setFontSize(8);
    pdf.pdf.setFont("times", "normal");
    pdf.pdf.text(
      "Generated by InsightFlow - AI-Powered Competitive Intelligence",
      20,
      pdf.yPosition
    );

    // Save the PDF
    const filename = `${companyNames
      .join("_vs_")
      .replace(/[^a-zA-Z0-9\s]/g, "")
      .replace(/\s+/g, "_")}_comparison_report.pdf`;
    pdf.save(filename);
  } catch (error) {
    console.error("Failed to generate PDF:", error);
    // Fallback to text export
    exportComparisonToTxt(comparison);
  }
}
